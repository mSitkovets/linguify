---
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: web
  annotations:
    kubernetes.io/ingress.class: nginx
    kubernetes.io/tls-acme: "false"
    ingress.shopify.io/tls-secretbuddy: "false"
    security.shopify.io/auth: "oauth2"
  labels:
    name: web
    app: "dev-degree-rails-project-mSitkovets"
    env: "production"
spec:
  tls:
  - hosts:
    - "dev-degree-rails-project-msitkovets.shopifycloud.com"
    secretName: dev-degree-rails-project-mSitkovets-shopifycloud-com
  rules:
  - host: "dev-degree-rails-project-msitkovets.shopifycloud.com"
    http:
      paths:
      - backend:
          serviceName: web
          servicePort: 80
---
apiVersion: certmanager.k8s.io/v1alpha1
kind: Certificate
metadata:
  name: dev-degree-rails-project-msitkovets-shopifycloud-com
  labels:
    app: dev-degree-rails-project-mSitkovets
  env: production
spec:
  secretName: dev-degree-rails-project-msitkovets-shopifycloud-com
  issuerRef:
    name: letsencrypt-issuer
    kind: ClusterIssuer
  dnsNames:
  - dev-degree-rails-project-msitkovets.shopifycloud.com
  acme:
    config:
    - http01:
        ingressClass: nginx
      domains:
      - dev-degree-rails-project-msitkovets.shopifycloud.com
---
apiVersion: v1
kind: Service
metadata:
  name: web
  labels:
    name: web
    app: "dev-degree-rails-project-mSitkovets"
    env: "production"
spec:
  ports:
  - port: 80
    name: http
    targetPort: 8080
  selector:
    name: web
    app: "dev-degree-rails-project-mSitkovets"
    env: "production"
---
apiVersion: apps/v1beta1
kind: Deployment
metadata:
  name: web
  annotations:
    shipit.shopify.io/restart: 'true'
  labels:
    name: web
    app: "dev-degree-rails-project-mSitkovets"
    env: "production"
spec:
  progressDeadlineSeconds: 120
  replicas: 3
  selector:
    matchLabels:
      name: web
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
  template:
    metadata:
      labels:
        name: web
        app: "dev-degree-rails-project-mSitkovets"
        env: "production"
    spec:
      automountServiceAccountToken: true
      containers:
      - name: rails
        image: gcr.io/shopify-docker-images/apps/production/dev-degree-rails-project-msitkovets:<%= current_sha %>
        args:
        - web
        ports:
        - containerPort: 8000
          name: http-alt
        envFrom:
        - configMapRef:
            name: application-state
        env:
        - name: GOOGLE_APPLICATION_CREDENTIALS
          value: /var/run/gcloud/key
        - name: ENV
          value: "production"
        - name: JEMALLOC_ENABLED
          value: 'true'
        - name: RAILS_ENV
          value: "production"
        - name: RAILS_LOG_TO_STDOUT
          value: '1'
        - name: NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        - name: NODE_IP
          valueFrom:
            fieldRef:
              fieldPath: status.hostIP
        - name: TRACE_PROXY_ADDR
          value: http://$(NODE_IP):8096/
        - name: STATSD_ADDR
          value: 127.0.0.1:8125
        - name: STATSD_IMPLEMENTATION
          value: datadog
        - name: PORT
          value: '8000'
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: database-url
              key: DATABASE_URL
        - name: IDENTITY_CLIENT_ID
          valueFrom:
            secretKeyRef:
              name: identity-config
              key: clientId
              optional: true
        - name: IDENTITY_CLIENT_SECRET
          valueFrom:
            secretKeyRef:
              name: identity-config
              key: clientSecret
              optional: true
        - name: KAFKA_CLIENT_CERT
          value: "/ssl/kafka-client/tls.crt"
        - name: KAFKA_CLIENT_KEY
          value: "/ssl/kafka-client/tls.key"
        resources:
          requests:
            cpu: 200m
            memory: 1Gi
          limits:
            cpu: 1000m
            memory: 1Gi
        volumeMounts:
        - name: ejson-keys
          mountPath: "/key"
          readOnly: true
        - mountPath: "/ssl/kafka-client"
          name: kafka-client
          readOnly: true
        - name: google-service-account
          mountPath: "/var/run/gcloud"
          readOnly: true
      - name: nginx
        image: gcr.io/shopify-docker-images/cloud/nginx:1.13
        imagePullPolicy: Always
        ports:
        - containerPort: 8080
          name: http
        resources:
          requests:
            cpu: 100m
            memory: 64Mi
          limits:
            cpu: 1000m
            memory: 128Mi
        securityContext:
          capabilities:
            drop:
            - AUDIT_WRITE
            - CHOWN
            - DAC_OVERRIDE
            - FOWNER
            - FSETID
            - KILL
            - MKNOD
            - NET_BIND_SERVICE
            - SETGID
            - SETFCAP
            - SETPCAP
            - SETUID
            - SYS_CHROOT
          privileged: false
          runAsUser: 100
        readinessProbe:
          httpGet:
            path: "/services/ping"
            port: 8080
          initialDelaySeconds: 20
          timeoutSeconds: 3
        env:
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: SERVER_NAME
          value: "dev-degree-rails-project-msitkovets.shopifycloud.com"
        - name: WEB_SERVICE_HOST
          value: 127.0.0.1:8000
        - name: TEMPLATE_TYPE
          value: rails
        - name: STATSD_HOST
          value: 127.0.0.1
        - name: STATSD_PORT
          value: '8125'
      volumes:
      - name: kafka-client
        secret:
          secretName: kafka-client
      - name: ejson-keys
        secret:
          secretName: ejson-keys
      - name: google-service-account
        secret:
          secretName: service-account-key
